name: Go

on:
  push: 
    branches: [ master, auto-release ] #For now

jobs:
  create_release:
    name: Create release
    runs-on: ubuntu-latest
    # Note this. We are going to use that in further jobs.
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: true
          prerelease: false
  release_assets:
    name: Release assets
    needs: create_release # we need to know the upload URL
    runs-on: ${{ matrix.config.os }} # we run many different builds
    strategy:
      # just an example matrix
      matrix:
        config:
          - os: ubuntu-latest
          - os: macos-latest
#           - os: windows-latest
    steps:
      # checkout of cource
      - name: Checkout code
        uses: actions/checkout@v1
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.15
      - name: Install Linux Dependencies
        if: matrix.config.os == 'ubuntu-latest'
        run: |
          sudo apt-get install -y libunbound-dev
#       - name: Install Dependencies
#         if: matrix.config.os == 'macos-latest'
#         run: |
#           brew install unbound
      - name: Install Dependencies
        run: go mod download
      - name: Caching Dependencies
        uses: actions/cache@v2
        with:
          # In order:
          # * Module download cache
          # * Build cache (Linux)
          # * Build cache (Mac)
          # * Build cache (Windows)
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
            ~/Library/Caches/go-build
            %LocalAppData%\go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Build
        run: env CGO_ENABLED=0 go build -v -tags unbound ./cmd/letsdane
      # ... whatever build and packaging steps you need here
      # and finally do an upload!
      - name: Compress action step
        uses: master-atul/tar-action@v1.0.2
        id: compress
        with:
          command: c
          cwd: ./
          files: |
            ./letsdane
          outPath: letsdane-${{ matrix.config.os }}.tar.gz
      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          # This is how it will be named on the release page. Put hatever name
          # you like, remember that they need to be different for each platform.
          # You can choose any build matrix parameters. For Rust I use the
          # target triple.
          asset_name: letsdane-${{ matrix.config.os }}.tar.gz
          # The path to the file you want to upload.
          asset_path: ./letsdane-${{ matrix.config.os }}.tar.gz
          # probably you will need to change it, but most likely you are
          # uploading a binary file
          asset_content_type: application/octet-stream
